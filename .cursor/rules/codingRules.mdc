---
description: HunToru プロジェクトの開発ルールとディレクトリ構成
globs:
alwaysApply: true
---

# HunToru プロジェクト構成

このプロジェクトは pnpm ワークスペースを使用したモノレポ構造です。

## ディレクトリ構成

```
HunToru/
├── .cursor/          # Cursor IDE設定
├── .vscode/          # VS Code設定
├── .github/          # GitHub設定 (CI/CD等)
├── apps/             # アプリケーション群
│   ├── web/          # Vite + React フロントエンド
│   └── api/          # Cloudflare Workers API
├── packages/         # 共通パッケージ群
├── node_modules/     # 依存関係
├── tsconfig.json     # TypeScript設定
├── package.json      # プロジェクト設定
├── pnpm-workspace.yaml # pnpm workspace設定
├── pnpm-lock.yaml    # 依存関係ロック
├── README.md         # プロジェクトドキュメント
├── SETUP.md          # セットアップドキュメント
└── .gitignore        # Git除外設定
```

## アプリケーション詳細

### apps/web (フロントエンド)

- Vite + React TypeScript
- eslint, tsconfig 設定済み
- `src/` ディレクトリにソースコード
- `public/` ディレクトリに静的ファイル

### apps/api (バックエンド)

- Cloudflare Workers (Wrangler)
- `src/` ディレクトリにソースコード
- `wrangler.jsonc` で Workers 設定管理

## 開発規約

- コンポーネントは凝集度を維持し、過度に分割しない
- 設定ファイルには説明コメントを含める
- 新しい共通機能は `packages/` ディレクトリに配置

## コード品質ガイドライン

### 基本方針

- **品質とスピードはトレードオフではない** - 内部品質を犠牲にしても長期的にはスピードは上がらない
- **割れ窓理論を避ける** - 一箇所の汚れが全体に影響するため、小さな問題も即座に修正する
- **技術的負債は意図的に管理する** - 無意識に作らず、必要な場合は明確に記録し返済計画を立てる

### 内部品質の重視

以下の内部品質を常に意識する：

- **保守性**: 変更が容易にできる
- **柔軟性**: 新しい要件に対応できる
- **可読性**: 他の開発者が理解しやすい
- **一貫性**: プロジェクト全体で統一された書き方

### 凝集度と結合度

- **高い凝集度**: 関連する機能を一つのモジュールにまとめる
- **低い結合度**: モジュール間の依存関係を最小限に抑える
- **単一責任原則**: 一つのクラス/関数は一つの責任のみを持つ

### アーキテクチャ原則

- **Clean Architecture**を意識した設計
- **依存関係逆転の法則**: 抽象に依存し、具象に依存しない
- **境界線を明確にする**: UI、ビジネスロジック、データ層の分離
- **内側から外側への依存**: 外側のレイヤーが内側を知ることはあっても、内側が外側を知ってはいけない

### 実践的ルール

- **「後でキレイにしよう」は来ない** - 書いた時点で品質を確保する
- **新しいツールで書かれた汚いコードを避ける** - 技術選択だけでは品質は向上しない
- **レビュー時は内部品質も必ずチェックする**
- **リファクタリングは継続的に行う** - 大きな書き直しではなく小さな改善を積み重ねる

### 禁止事項

- 締切を理由とした内部品質の妥協
- 技術的負債の放置
- 「動けばいい」の思考停止
- 結合度を高める安易な実装

### TypeScript 特有のルール

- `any`型の使用は原則禁止（型定義が困難な場合は`unknown`を使用）
- 型ガードを適切に使用する
- Generics を活用し、型安全性を確保する
- 型定義ファイルは適切に分離・管理する
- **JSDoc コメントを積極的に使用する**
  - 公開 API（関数、クラス、型）には必ず JSDoc を記述
  - パラメータと戻り値の説明を含める
  - 使用例を `@example` で提供
  - 複雑なロジックには `@description` で詳細説明

### React 特有のルール

- Hooks は適切に使用し、依存配列を正しく管理する
- コンポーネントは単一責任原則に従う
- props の型定義は必須
- 副作用は useEffect で適切に管理する

#### コンポーネント定義

- **export const** を使用する（関数宣言の巻き上げを避けるため）
- props の型定義は必ずコンポーネント定義の前に記述する
- `...restProps` を積極的に活用し、HTML 属性の拡張性を確保する

#### Props 型定義

- **基本は interface を使用**、Union 型や mapped types など type 特有の機能が必要な場合のみ type を使用
- 継承や拡張が想定される場合は必ず interface を選択

#### コンポーネント分割の指針

- **過度な分割を避ける** - 可読性を損なう細分化は禁止
- 分割する際は明確な理由を持つ：
  - メモ化によるレンダリングパフォーマンス最適化
  - 複数箇所での再利用
  - 独立したビジネスロジックの分離
  - テストの容易性
- カスタムフックも同様に、明確な理由なく作成しない

### パフォーマンス

- 最適化は計測してから行う
- 不必要な再レンダリングを避ける
- メモ化は適切に使用する（過度なメモ化は避ける）

## コード一貫性ルール

### ネーミング規則

- **ファイル名**: kebab-case（例：`user-profile.tsx`）
- **コンポーネント名**: PascalCase（例：`UserProfile`）
- **関数・変数名**: camelCase（例：`getUserData`）
- **定数**: UPPER_SNAKE_CASE（例：`API_BASE_URL`）
- **型名**: PascalCase（例：`UserData`、`ApiResponse`）

#### 関数・変数の接頭辞ルール

- **handle**: イベントハンドラー関数（例：`handleClick`、`handleSubmit`）
- **is**: 真偽値を返す関数・変数で状態や条件を表す（例：`isLoading`、`isVisible`）
- **has**: 真偽値を返す関数・変数で所有や存在を表す（例：`hasError`、`hasPermission`）
- **get**: 値を取得する関数（例：`getUserData`、`getFormattedDate`）
- **set**: 値を設定する関数（例：`setUserData`、`setLoading`）
- **on**: イベントを表す props（例：`onClick`、`onSubmit`）

### インポート文の整理

- **グループ化順序**:
  1. React 関連
  2. 外部ライブラリ
  3. 内部パッケージ（@huntoru/\*）
  4. 相対パス
- **各グループ間は空行で区切る**
- **デフォルトインポートを先に、名前付きインポートを後に**

### ファイル構成

- **1 ファイル 1 コンポーネント** - 例外：小さなヘルパー型のみ
- **index.tsx** - フォルダのメインエクスポート用
- **types.ts** - 型定義専用ファイル
- **constants.ts** - 定数定義専用ファイル
- **utils.ts** - ユーティリティ関数専用ファイル

### エラーハンドリング

- **統一されたエラー型** - 共通パッケージで定義
- **try-catch** - 非同期処理では必ず適切なエラーハンドリング
- **Error Boundary** - React コンポーネントレベルでのエラー処理

### 定数管理

- **環境変数** - `@huntoru/config`パッケージで管理
- **アプリケーション定数** - 各アプリの`constants.ts`で管理
- **コンポーネント定数** - コンポーネントファイル内で`const`定義

### 非同期処理

- **async/await** を基本とする（Promise チェーンより可読性が高い）
- **Promise.all** - 並列処理が可能な場合は積極的に使用
- **エラーハンドリング** - 必ず適切な try-catch ブロックを配置

### コメント・TODO

- **TODO**: `// TODO: 具体的な内容と期限`
- **FIXME**: `// FIXME: 問題の詳細`
- **NOTE**: `// NOTE: 重要な説明`
